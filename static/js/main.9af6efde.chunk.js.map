{"version":3,"sources":["assets/lp-badge-white.svg","components/Nav.tsx","components/Search.tsx","components/ModelCard.tsx","api/GitHubAPI.tsx","App.tsx","index.tsx"],"names":["Nav","routes","React","useState","isActive","setIsActive","className","color","Header","active","Brand","Item","href","src","logo","alt","Burger","onClick","a","Menu","Container","align","map","route","i","path","label","renderAs","target","rel","icon","faGithub","size","updateSearchRowData","rowData","tag","index","indexOf","splice","push","isSelectedTag","title","searchData","doctype","includes","backends","sizes","SearchTagRow","data","setSearchData","Group","tags","e","textContent","SearchTagGroup","tagRows","lastRowIndex","length","tagRow","mb","SearchPanel","totalModelCount","searchTagRows","Fragment","subtitle","italic","textColor","Field","Control","Input","placeholder","value","text","onChange","faSearch","ModelSpec","modelConfig","isCopied","setIsCopied","split","header","suffix","url","backend","navigator","clipboard","writeText","setTimeout","faCheckCircle","faCopy","Object","values","ModelCard","name","author","authorLink","docType","updateTime","modelSpecs","issueLink","textSize","join","undefined","modelSpec","request","owner","repo","state","result","parsedData","filter","issueFilter","parseGithubIssue","modelData","issueData","issueType","props","pipelineData","labels","issue","issueBody","body","bodyPartsLis","bodyPart","startsWith","yamlObj","YAML","parse","slice","dateInfo","Date","updated_at","toDateString","console","log","model","user","login","html_url","replace","toLowerCase","link","type","config","architecture","NAVROUTES","fetchSearchTagDataFromModelData","union","singleModelData","spec","countModel","reduce","sum","current","applySearchConditions","targetModelData","intersection","AddModelButton","inverted","window","open","faArrowAltCircleUp","App","defualtModelData","setModelData","setPipelineData","GitHubIssues","then","useEffect","Body","pb","Column","concat","offset","textTransform","mt","singlePipelineData","ReactDOM","render","basename","process","component","document","getElementById"],"mappings":"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","file":"static/js/main.9af6efde.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/lp-badge-white.87e3ef5c.svg\";","import \"./../styles/App.scss\";\nimport React from \"react\";\nimport { Hero, Navbar, Container } from \"react-bulma-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\nimport logo from \"./../assets/lp-badge-white.svg\";\n\nexport interface NavRoute {\n    /* The url path, i.e. in the url `http://localhost/about`, `/about` is the path. */\n    path: string;\n    /* The name of the route that's displayed in the navigation. */\n    label: string;\n}\n\ninterface NavProps {\n    routes: NavRoute[];\n}\n\nexport const Nav = ({ routes }: NavProps) => {\n    const [isActive, setIsActive] = React.useState(false);\n    const toggleActive = () => setIsActive((a) => !a);\n    return (\n        <Hero className=\"slogan-hero is-bold\" color=\"danger\">\n            <Hero.Header>\n                <Navbar className=\"lp-navbar\" active={isActive}>\n                    <Container>\n                        <Navbar.Brand>\n                            <Navbar.Item href=\"https://layout-parser.github.io/\">\n                                <img src={logo} alt=\"Logo\" className=\"lp-badge\" />\n                            </Navbar.Item>\n                            <Navbar.Burger onClick={toggleActive} />\n                        </Navbar.Brand>\n                        <Navbar.Menu>\n                            <Navbar.Container align=\"right\">\n                                {routes.map((route, i) => (\n                                    <Navbar.Item key={i} href={route.path}>\n                                        {route.label}\n                                    </Navbar.Item>\n                                ))}\n                                <Navbar.Item renderAs=\"div\">\n                                    <a\n                                        className=\"bg-transparent button is-danger\"\n                                        target=\"_blank\"\n                                        href=\"https://github.com/Layout-Parser/layout-parser\"\n                                        rel=\"noreferrer\"\n                                    >\n                                        <FontAwesomeIcon icon={faGithub} size=\"lg\" />\n                                    </a>\n                                </Navbar.Item>\n                            </Navbar.Container>\n                        </Navbar.Menu>\n                    </Container>\n                </Navbar>\n            </Hero.Header>\n        </Hero>\n    );\n};\n","import \"./../styles/App.scss\";\nimport React from \"react\";\nimport {\n    Heading,\n    Form,\n    Icon,\n    Block,\n    Tag,\n    Button,\n} from \"react-bulma-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\n\nexport interface TagRowData {\n    title: string;\n    tags: string[];\n}\n\nexport interface SearchData {\n    text: String;\n    doctype: String[];\n    backends: String[];\n    sizes: String[];\n}\n\nexport interface SearchTagRowProps {\n    data: TagRowData;\n    searchData: SearchData;\n    setSearchData(value: SearchData): void;\n}\n\nfunction updateSearchRowData(rowData: String[], tag: string): String[] {\n    const index = rowData.indexOf(tag);\n    if (index > -1) {\n        rowData.splice(index, 1);\n    } else {\n        rowData.push(tag);\n    }\n    return rowData;\n}\n\nfunction isSelectedTag(\n    title: String,\n    tag: String,\n    searchData: SearchData\n): Boolean {\n    if (title === \"Document Type\") return searchData.doctype.includes(tag);\n    else if (title === \"Backends\") return searchData.backends.includes(tag);\n    else return searchData.sizes.includes(tag);\n}\n\nexport const SearchTagRow = ({\n    data,\n    searchData,\n    setSearchData,\n}: SearchTagRowProps) => {\n    return (\n        <Tag.Group>\n            <Tag color=\"white\">\n                <strong>{data.title}</strong>\n            </Tag>\n\n            {data.tags.map((tag, i) => (\n                <Tag\n                    key={i}\n                    className={\n                        isSelectedTag(data.title, tag, searchData)\n                            ? \"is-selected\"\n                            : \"is-clickable\"\n                    }\n                    onClick={(e: any) => {\n                        if (data.title === \"Document Type\") {\n                            setSearchData({\n                                ...searchData,\n                                doctype: updateSearchRowData(\n                                    searchData.doctype,\n                                    e.target.textContent\n                                ),\n                            });\n                        } else if (data.title === \"Backends\") {\n                            setSearchData({\n                                ...searchData,\n                                backends: updateSearchRowData(\n                                    searchData.backends,\n                                    e.target.textContent\n                                ),\n                            });\n                        } else {\n                            // Model Sizes\n                            setSearchData({\n                                ...searchData,\n                                sizes: updateSearchRowData(\n                                    searchData.sizes,\n                                    e.target.textContent\n                                ),\n                            });\n                        }\n                    }}\n                >\n                    {tag}\n                </Tag>\n            ))}\n        </Tag.Group>\n    );\n};\n\nexport interface SearchTagGroupProps {\n    tagRows: TagRowData[];\n    searchData: SearchData;\n    setSearchData(value: SearchData): void;\n}\n\nexport const SearchTagGroup = ({\n    tagRows,\n    searchData,\n    setSearchData,\n}: SearchTagGroupProps) => {\n    const lastRowIndex = tagRows.length - 1;\n    return (\n        <Block>\n            {tagRows.map((tagRow, i) => (\n                <Block mb={i === lastRowIndex ? 0 : 3} key={i}>\n                    <SearchTagRow\n                        data={tagRow}\n                        searchData={searchData}\n                        setSearchData={setSearchData}\n                    />\n                </Block>\n            ))}\n        </Block>\n    );\n};\n\nexport interface SearchPanelProps {\n    totalModelCount: Number;\n    searchTagRows: TagRowData[];\n    searchData: SearchData;\n    setSearchData(value: SearchData): void;\n}\n\nexport const SearchPanel = ({\n    totalModelCount,\n    searchTagRows,\n    searchData,\n    setSearchData,\n}: SearchPanelProps) => {\n    return (\n        <React.Fragment>\n        <div className=\"sticky\">\n            <Heading subtitle italic mb={4} textColor=\"grey-lighter\">\n                Search from {totalModelCount} models &amp; pipelines\n            </Heading>\n            <Form.Field className=\"has-addons\">\n                <Form.Control className=\"is-expanded\">\n                    <Form.Input\n                        placeholder=\"e.g, try type 'pubLayNet'\"\n                        value={searchData.text}\n                        onChange={(e) => {\n                            setSearchData({\n                                ...searchData,\n                                text: e.target.value,\n                            });\n                        }}\n                    />\n                    <Icon align=\"right\" size=\"small\">\n                        <FontAwesomeIcon icon={faSearch} size=\"lg\" />\n                    </Icon>\n                </Form.Control>\n                <Form.Control>\n                    <Button\n                        className=\"clear-btn\"\n                        onClick={() => {\n                            setSearchData({\n                                text: \"\",\n                                doctype: [],\n                                backends: [],\n                                sizes: [],\n                            });\n                        }}\n                    >\n                        clear\n                    </Button>\n                </Form.Control>\n            </Form.Field>\n            <SearchTagGroup\n                tagRows={searchTagRows}\n                searchData={searchData}\n                setSearchData={setSearchData}\n            />\n        </div>\n        </React.Fragment>\n    );\n};\n","import \"./../styles/App.scss\";\nimport React from \"react\";\nimport { Block, Tag, Content } from \"react-bulma-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheckCircle, faCopy } from \"@fortawesome/free-solid-svg-icons\";\n\nexport interface ModelSpecProps {\n    modelConfig: string;\n    tags: {\n        backend: string;\n        size: string;\n    };\n}\n\nexport const ModelSpec = ({ modelConfig, tags }: ModelSpecProps) => {\n    const [isCopied, setIsCopied] = React.useState(false);\n    const [header, suffix] = modelConfig.split('//');\n    const url = `${header}//${tags.backend}/${suffix}`\n\n    return (\n        <Tag.Group mb=\"0\">\n            <Tag\n                className=\"is-clickable is-link is-light has-addons\"\n                onClick={() => {\n                    setIsCopied(true);\n                    navigator.clipboard.writeText(`lp.AutoLayoutModel(\"${url}\")`);\n                    setTimeout(() => {\n                        setIsCopied(false);\n                    }, 3000);\n                }}\n            >\n                {url}\n                <FontAwesomeIcon\n                    className=\"ml-1\"\n                    icon={isCopied ? faCheckCircle : faCopy}\n                />\n            </Tag>\n            {Object.values(tags).map((tag, i) => (\n                <Tag key={i}>{tag}</Tag>\n            ))}\n        </Tag.Group>\n    );\n};\n\nexport interface ModelCardProps {\n    name: string;\n    author: string;\n    authorLink: string;\n    docType: string[];\n    updateTime: string;\n    modelSpecs?: ModelSpecProps[];\n    issueLink: string;\n}\n\nexport const ModelCard = ({\n    name,\n    author,\n    authorLink,\n    docType,\n    updateTime,\n    modelSpecs,\n    issueLink,\n}: ModelCardProps) => {\n    return (\n        <React.Fragment>\n            <div className=\"is-divider my-3\" />\n            <Content mb={2}>\n                <Block mb={2}>\n                    <Block renderAs=\"a\" textSize={5} href={issueLink}>\n                        {name}\n                    </Block>\n                </Block>\n                <Block mb={2}>\n                    <span className=\"model-list-cat mr-2\">Author</span>\n                    <span>\n                        <a href={authorLink}>{author}</a>\n                    </span>\n                    <span className=\"model-list-cat mx-3\">-</span>\n                    <span className=\"model-list-cat mr-2\">DocType</span>\n                    <span>{docType.join(\", \")}</span>\n                    <span className=\"model-list-cat mx-3\">-</span>\n                    <span className=\"model-list-cat mr-2\">Updated</span>\n                    <span>{updateTime}</span>\n                </Block>\n                {modelSpecs === undefined ? null : (\n                    <Block>\n                        {modelSpecs.map((modelSpec, i) => (\n                            <ModelSpec key={i} {...modelSpec} />\n                        ))}\n                    </Block>\n                )}\n            </Content>\n        </React.Fragment>\n    );\n};\n","import { Endpoints } from \"@octokit/types\";\r\nimport { request } from \"@octokit/request\";\r\nimport YAML from \"yaml\";\r\nimport { ModelCardProps } from \"./../components\";\r\n\r\nexport type ListIssueResponse =\r\n    Endpoints[\"GET /repos/{owner}/{repo}/issues\"][\"response\"];\r\nexport type IssueData =\r\n    Endpoints[\"GET /repos/{owner}/{repo}/issues/{issue_number}\"][\"response\"][\"data\"];\r\nexport type IssueLabelsData =\r\n    Endpoints[\"GET /repos/{owner}/{repo}/issues/{issue_number}\"][\"response\"][\"data\"][\"labels\"];\r\n\r\nexport async function GitHubIssues() {\r\n    const result = await request(\"GET /repos/{owner}/{repo}/issues\", {\r\n        owner: \"Layout-Parser\",\r\n        repo: \"platform\",\r\n        state: \"closed\",\r\n    });\r\n\r\n    const parsedData = result.data\r\n        .filter((data: IssueData) => issueFilter(data[\"labels\"]))\r\n        .map((data: IssueData) => parseGithubIssue(data)!);\r\n\r\n    const modelData = parsedData\r\n        .filter((issueData) => issueData.issueType === \"model\")\r\n        .map((issueData) => issueData.props);\r\n\r\n    const pipelineData = parsedData\r\n        .filter((issueData) => issueData.issueType === \"pipeline\")\r\n        .map((issueData) => issueData.props);\r\n    return [modelData, pipelineData];\r\n}\r\n\r\ninterface parsedIssueData {\r\n    props: ModelCardProps;\r\n    issueType: string;\r\n}\r\n\r\ninterface modelConfig {\r\n    \"lp-model-config\"?: string;\r\n    \"lp-model-name\"?: string;\r\n    architecture: string;\r\n    sizes: string;\r\n}\r\n\r\nfunction issueFilter(labels: IssueLabelsData) {\r\n    for (let label of labels) {\r\n        if (typeof label !== \"string\" && label.name === \"model/approved\")\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction parseGithubIssue(issue: IssueData) {\r\n    const splitter = \"```\";\r\n    const target = \"yaml\";\r\n    const issueBody = issue.body;\r\n\r\n    if (issueBody) {\r\n        const bodyPartsLis = issueBody.split(splitter);\r\n        for (let bodyPart of bodyPartsLis) {\r\n            if (bodyPart.startsWith(target)) {\r\n                const yamlObj = YAML.parse(bodyPart.slice(target.length, -1));\r\n                const dateInfo = new Date(issue.updated_at)\r\n                    .toDateString()\r\n                    .split(\" \")\r\n                    .slice(1);\r\n                console.log(issue);\r\n                let model: parsedIssueData = {\r\n                    props: {\r\n                        name: yamlObj.name,\r\n                        author: issue.user\r\n                            ? issue.user.login === \"lolipopshock\"\r\n                                ? \"layout-parser\"\r\n                                : issue.user.login\r\n                            : \"Unknown User\",\r\n                        authorLink: issue.user\r\n                            ? issue.user.html_url === \"https://github.com/lolipopshock\"\r\n                                ? \"https://layout-parser.github.io/\"\r\n                                : issue.user.html_url\r\n                            : \"\",\r\n                        updateTime: `${dateInfo[0]} ${dateInfo[1]}, ${dateInfo[2]}`,\r\n                        docType: yamlObj.doctype\r\n                            .replace(/\\s/g, \"\")\r\n                            .toLowerCase()\r\n                            .split(\",\"),\r\n                        issueLink: yamlObj.link ? yamlObj.link : issue.html_url,\r\n                    },\r\n                    issueType: yamlObj.type.toLowerCase(),\r\n                };\r\n\r\n                if (yamlObj[\"config-names\"]) {\r\n                    model.props.modelSpecs = yamlObj[\"config-names\"].map(\r\n                        (config: modelConfig) => {\r\n                            return {\r\n                                modelConfig:\r\n                                    config[\"lp-model-config\"] || config[\"lp-model-name\"],\r\n                                tags: {\r\n                                    backend: config.architecture,\r\n                                    size: config.sizes,\r\n                                },\r\n                            };\r\n                        }\r\n                    );\r\n                }\r\n                return model;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import \"./styles/App.scss\";\nimport React from \"react\";\nimport { intersection, union } from \"lodash\";\nimport {\n  Hero,\n  Container,\n  Content,\n  Heading,\n  Columns,\n  Button,\n} from \"react-bulma-components\";\nimport {\n  Nav,\n  NavRoute,\n  SearchPanel,\n  ModelCard,\n  ModelCardProps,\n  SearchData,\n} from \"./components\";\nimport { GitHubIssues } from \"./api/GitHubAPI\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowAltCircleUp } from \"@fortawesome/free-solid-svg-icons\";\n\nconst CREATE_ISSUE_URL =\n  \"https://github.com/Layout-Parser/platform/issues/new?assignees=lolipopshock&labels=model%2Fupload&template=new-model-pipeline-addition.md&title=\";\n\nconst NAVROUTES: NavRoute[] = [\n  {\n    path: \"https://layout-parser.github.io/tutorials.html\",\n    label: \"Tutorials\",\n  },\n  {\n    path: \"https://layout-parser.readthedocs.io/en/latest/\",\n    label: \"Docs\",\n  },\n  {\n    path: \"/\",\n    label: \"Open Platform\",\n  },\n  {\n    path: \"https://join.slack.com/t/layout-parser/shared_invite/zt-ohjd14k1-OrJ2HltwVRGrxhLeHMfW_w\",\n    label: \"Discussion\",\n  },\n];\n\nfunction fetchSearchTagDataFromModelData(modelData: ModelCardProps[]) {\n  return [\n    {\n      title: \"Document Type\",\n      tags: union(\n        ...modelData.map((singleModelData) => singleModelData.docType)\n      ),\n    },\n    {\n      title: \"Backends\",\n      tags: union(\n        ...modelData.map((singleModelData) =>\n          singleModelData.modelSpecs?.map((spec) => spec.tags.backend)\n        )\n      ),\n    },\n    {\n      title: \"Model Sizes\",\n      tags: union(\n        ...modelData.map((singleModelData) =>\n          singleModelData.modelSpecs?.map((spec) => spec.tags.size)\n        )\n      ),\n    },\n  ];\n}\n\nfunction countModel(modelData: ModelCardProps[]): number {\n  return modelData\n    .map((model) => (model.modelSpecs ? model.modelSpecs.length : 0))\n    .reduce((sum, current) => sum + current, 0);\n}\n\nfunction applySearchConditions(\n  modelData: ModelCardProps[],\n  searchData: SearchData\n): ModelCardProps[] {\n  let targetModelData = modelData;\n\n  targetModelData = targetModelData.filter((model) =>\n    model.name.toLowerCase().includes(searchData.text.toLowerCase())\n  );\n\n  if (searchData.doctype.length) {\n    targetModelData = targetModelData.filter((model) => {\n      return intersection(model.docType, searchData.doctype).length;\n    });\n  }\n\n  if (searchData.backends.length) {\n    targetModelData = targetModelData.filter((model) => {\n      return intersection(\n        model.modelSpecs\n          ? model.modelSpecs.map((modelSpec) => modelSpec.tags.backend)\n          : [],\n        searchData.backends\n      ).length;\n    });\n\n    targetModelData = targetModelData.map((model) => {\n      return {\n        ...model,\n        modelSpecs:\n          model.modelSpecs!.filter((modelSpec) =>\n            searchData.backends.includes(modelSpec.tags.backend)\n          ) || [],\n      };\n    });\n  }\n\n  if (searchData.sizes.length) {\n    targetModelData = targetModelData.filter((model) => {\n      return intersection(\n        model.modelSpecs\n          ? model.modelSpecs.map((modelSpec) => modelSpec.tags.size)\n          : [],\n        searchData.sizes\n      ).length;\n    });\n\n    targetModelData = targetModelData.map((model) => {\n      return {\n        ...model,\n        modelSpecs:\n          model.modelSpecs!.filter((modelSpec) =>\n            searchData.sizes.includes(modelSpec.tags.size)\n          ) || [],\n      };\n    });\n  }\n\n  return targetModelData;\n}\n\nconst AddModelButton = () => {\n  return <Button\n    className=\"ml-2 mt-2 px-2 py-1 has-text-grey is-italic\"\n    color=\"dark\"\n    size=\"small\"\n    inverted={true}\n    onClick={() => {\n      window.open(CREATE_ISSUE_URL);\n    }}\n  >\n    <FontAwesomeIcon \n      icon={faArrowAltCircleUp} \n      className=\"mr-1\" />\n    {\"Upload Yours\"}\n  </Button>\n}\n\nfunction App() {\n  // init states\n  const defualtModelData: ModelCardProps[] = [\n    {\n      name: \"\",\n      author: \"\",\n      authorLink: \"\",\n      docType: [],\n      updateTime: \"\",\n      issueLink: \"\",\n    },\n  ];\n  const defualtSearchData: SearchData = {\n    text: \"\",\n    doctype: [],\n    backends: [],\n    sizes: [],\n  };\n  const [modelData, setModelData] = React.useState(defualtModelData);\n  const [pipelineData, setPipelineData] = React.useState(defualtModelData);\n  const [searchData, setSearchData] = React.useState(defualtSearchData);\n\n  // init values of states\n  if (modelData === defualtModelData) {\n    GitHubIssues().then(([modelData, pipelineData]) => {\n      setModelData(modelData);\n      setPipelineData(pipelineData);\n    });\n  }\n\n  React.useEffect(() => { });\n\n  return (\n    <React.Fragment>\n      <Nav routes={NAVROUTES} />\n      <Hero>\n        <Hero.Body color=\"white\">\n          <Container>\n            <Content pb={3}>\n              <Heading size={2}>Layout Parser Sharing Platform</Heading>\n            </Content>\n            <Columns>\n              <Columns.Column size={4}>\n                <SearchPanel\n                  searchTagRows={fetchSearchTagDataFromModelData(\n                    modelData.concat(pipelineData)\n                  )}\n                  totalModelCount={\n                    countModel(applySearchConditions(modelData, searchData)) +\n                    applySearchConditions(pipelineData, searchData).length\n                  }\n                  searchData={searchData}\n                  setSearchData={setSearchData}\n                />\n              </Columns.Column>\n              <Columns.Column offset={1}>\n                <Heading subtitle size={3} mb={1} textTransform=\"uppercase\">\n                  <span>Models</span>\n                  <AddModelButton/>\n                </Heading>\n\n                {applySearchConditions(modelData, searchData).map(\n                  (singleModelData, i) => (\n                    <ModelCard key={i} {...singleModelData} />\n                  )\n                )}\n\n                <Heading\n                  subtitle\n                  size={3}\n                  mb={1}\n                  mt={5}\n                  textTransform=\"uppercase\"\n                >\n                  <span>Pipelines</span>\n                  <AddModelButton/>\n                </Heading>\n\n                {applySearchConditions(pipelineData, searchData).map(\n                  (singlePipelineData, i) => (\n                    <ModelCard key={i} {...singlePipelineData} />\n                  )\n                )}\n              </Columns.Column>\n            </Columns>\n          </Container>\n        </Hero.Body>\n      </Hero>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Route path=\"/\" component={App} />\n  </BrowserRouter>,\n  document.getElementById('root')\n);"],"sourceRoot":""}